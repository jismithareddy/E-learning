<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skill Craft Topics</title>
    <style>
        /* Full-page layout */
        body {
            display: flex;
            flex-direction: column;
            align-items: center; /* Center nav bar horizontally */
            margin: 0;
            height: 100vh;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0; /* Light gray background */
        }

        /* Style for the navigation bar (centered at the top) */
        nav {
            background-color: #333; /* Dark gray background */
            width: 100%;
            text-align: center;
            padding: 10px 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
        }
        nav a {
            margin: 0 10px;
            text-decoration: none;
            border: 2px solid #4CAF50; /* Green border */
            padding: 5px;
            color: #fff; /* White text */
            transition: background-color 0.2s ease; /* Add a transition effect */
        }
        nav a:hover {
            background-color: #4CAF50; /* Green background on hover */
        }

        /* Container for the aside and main content */
        .container {
            display: flex;
            width: 100%;
            height: 100%;
            margin-top: 20px;
        }

        /* Style for the aside sidebar (under the nav, on the left) */
        aside {
            width: 250px;
            background-color: #fff; /* White background */
            padding: 20px;
            overflow-y: auto; /* Make the sidebar scrollable if content overflows */
            border: 1px solid #ddd; /* Light gray border */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
        }
        aside a {
            display: block;
            margin: 10px 0;
            text-decoration: none;
            color: #337ab7; /* Blue text */
            transition: color 0.2s ease; /* Add a transition effect */
        }
        aside a:hover {
            color: #23527c; /* Darker blue text on hover */
        }

        /* Main content area (next to aside) */
        .content {
            width: 700px; /* Adjusted width to match JavaTpoint's layout */
            flex-grow: 1; /* Take up remaining space */
            padding: 20px;
            overflow-y: auto;
            max-height: 80vh; /* Scrollable content area */
            background-color: #fff; /* White background */
            border: 1px solid #ddd; /* Light gray border */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
        }

        .content h1 {
            font-size: 24px;
            margin-bottom: 10px;
            color: #333; /* Dark gray text */
        }

        .content p, .content li {
            font-size: 16px;
            line-height: 1.6;
            color: #666; /* Dark gray text */
        }

        /* Add some basic styling for tables */
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f0f0f0; /* Light gray background */
        }
    </style>
</head>
<body>

    <!-- Navigation bar centered at the top -->
    <nav>
        <a href="" class="page">Basics</a>
        <a href="">HTML</a>
        <a href="">CSS</a>
        <a href="">JS</a>
        <a href="">Python</a>
        <a href="">Java</a>
        <a href="">C</a>
        <a href="">SQL</a>
    </nav>
   

    <!-- Container for aside and main content -->
    <div class="container">
        <!-- Sidebar (aside) on the left -->
        <aside>
            <a onclick="loadContent('computer')">What is Computer</a>
            <a onclick="loadContent('key_com_computer')">Key Components of Computer</a>
            <a onclick="loadContent ('all_computer')">Types of Computer</a>
            <a onclick="loadContent('use')">Common Use of Computer</a>
            <a onclick="loadContent('intro')">Introduction to Programming</a>
            <a onclick="loadContent('why')">Why Programming</a>
            <a onclick="loadContent('comp')">Compilers & Interpreters</a>
            <a onclick="loadContent('ptypes')">Different Kinds of Programming Languages</a>
        </aside>
        
        <!-- Main content area (right of the aside) -->
        <div class="content" id="contentArea">
            <h1>Start Your Learning</h1>
            <p>Go through the topics available at the left side, they will definitely enhance your knowledge about basics of programming.</p>
        </div>
    </div>

    <script>
        function loadContent(topic) {
            let contentArea = document.getElementById('contentArea');
            let content = '';

            switch(topic) {
                case 'computer':
                    content=`<header>
    <h1>Introduction to Computers</h1>
</header>

<main>
    <section>
        <h2>What is a Computer?</h2>
        <p>A <strong>computer</strong> is an electronic device designed to process, store, and retrieve data. Computers follow specific instructions (programs) to perform a wide range of tasks, making them invaluable in today's digital age. They are used for various purposes such as communication, data processing, entertainment, education, and much more.</p>
        <p>Computers can solve complex problems and perform repetitive tasks more efficiently than humans, making them essential tools in almost every industry.</p>
    </section>

    <section>
       

    

 
</main>

                    `
                    break;
                case "key_com_computer":
                    content=` <h2>Key Components of a Computer</h2>
        <ul>
            <li><strong>Central Processing Unit (CPU):</strong> The CPU is often referred to as the "brain" of the computer. It interprets and carries out instructions from software, performing calculations, managing data, and controlling other components. Modern CPUs can have multiple cores, enabling them to execute several tasks simultaneously, thus significantly enhancing processing speed and efficiency. The architecture of a CPU affects how it communicates with other components, which can influence overall performance. Additionally, advancements in technology continually improve CPU efficiency and capabilities, allowing for more complex computations and faster processing times.</li>
            <li><strong>Random Access Memory (RAM):</strong> RAM is the computer's short-term memory, where it temporarily stores data that is actively being used or processed. Unlike permanent storage, data in RAM is lost when the computer is turned off. More RAM allows a computer to run more applications simultaneously and enhances overall performance, particularly during multitasking. Different types of RAM, such as DDR4 or DDR5, offer varying speeds and efficiencies, affecting how quickly data can be accessed. As software applications become more demanding, having sufficient RAM has become essential for a smooth computing experience.</li>
            <li><strong>Storage (Hard Drive or Solid-State Drive):</strong> Storage devices are where data is saved permanently. Hard drives use mechanical components to store information, while solid-state drives (SSDs) use flash memory, making them faster and more reliable. The capacity and speed of storage directly influence a computer's performance and the amount of data it can hold. SSDs are increasingly preferred for their speed, which significantly reduces boot and load times. However, traditional hard drives still offer larger storage capacities at a lower cost, making them useful for archiving and storing large files.</li>
            <li><strong>Input Devices:</strong> Input devices allow users to interact with the computer and provide data. Common examples include keyboards for typing, mice for pointing and clicking, and scanners for digitizing documents. These devices play a vital role in the overall user experience and the efficiency of data entry. Specialized input devices like graphics tablets and game controllers cater to specific tasks, enhancing functionality for professionals and gamers. The design and ergonomics of input devices can also impact user comfort and productivity during prolonged use.</li>
            <li><strong>Output Devices:</strong> Output devices display or produce the results of the computer's processes. Monitors, printers, and speakers are typical examples. These devices convey information to the user in various formats, making them essential for communication and interaction with the system. Advances in display technology have led to higher resolutions and better color accuracy, improving the visual experience. Similarly, printers have evolved to offer faster printing speeds and higher quality outputs, catering to both personal and professional needs.</li>
        </ul>
    </section>`
    break;
    case 'all_computer':
        content=`<section>
        <h2>Types of Computers</h2>
        <ul>
            <li><strong>Personal Computers (PCs):</strong> Personal computers are designed for individual use. They include desktops and laptops, which are versatile machines used for various tasks, such as browsing the internet, word processing, and gaming. PCs are customizable and can be upgraded to meet specific user needs, making them popular among everyday consumers. The rise of gaming PCs has created a niche market focused on high-performance components for better graphics and speed. Furthermore, with the integration of cloud services, personal computers are now more connected than ever, allowing for easy access to data and applications.</li>
            <li><strong>Workstations:</strong> Workstations are high-performance PCs optimized for tasks that require greater processing power. They are commonly used in fields like graphic design, engineering, and scientific research. Workstations often feature advanced graphics capabilities and larger amounts of RAM to handle demanding applications effectively. Their reliability and performance make them essential for professionals who require consistent power for tasks such as 3D rendering and data analysis. Additionally, workstations can be configured with multiple processors and GPUs to further enhance their capabilities.</li>
            <li><strong>Tablets and Smartphones:</strong> Tablets and smartphones are portable devices that integrate computing power with touchscreens. They are designed for on-the-go use, allowing users to browse the web, stream media, and use apps. These devices emphasize portability and convenience, making them ideal for casual users and professionals alike. With powerful processors and extensive app ecosystems, they can perform many functions traditionally reserved for computers. The increasing integration of features such as cameras and biometric security has also transformed how users interact with these devices.</li>
            <li><strong>Servers:</strong> Servers are powerful machines that provide data, services, or applications to other computers over a network. They are critical for businesses, enabling file sharing, data storage, and hosting websites. Servers are designed for reliability and uptime, often utilizing advanced cooling and redundancy features to ensure continuous operation. Virtualization technology allows multiple server environments to run on a single physical server, optimizing resource usage. Additionally, cloud computing has changed how servers are deployed, enabling on-demand access to computing resources across the internet.</li>
            <li><strong>Mainframes:</strong> Mainframes are large, high-performance computers used for bulk data processing and critical applications in industries such as banking and healthcare. They can handle thousands of transactions simultaneously, making them essential for organizations that require high levels of data processing capability and reliability. Mainframes support extensive input/output operations and are capable of running multiple operating systems at once. Their robust architecture allows them to process large volumes of data with minimal downtime, making them indispensable for mission-critical applications.</li>
            <li><strong>Supercomputers:</strong> Supercomputers are the fastest and most powerful computers in existence, used for tasks that require immense computational power, such as scientific simulations and complex data analysis. They utilize parallel processing to tackle problems that are infeasible for conventional computers, playing a crucial role in research and technological advancements. Supercomputers are often used for climate modeling, molecular research, and simulations of physical systems, leading to breakthroughs in various fields. The development of supercomputers continues to push the boundaries of what is possible in computational science and engineering.</li>
        </ul>
        <img src="Types-of-Computer.jpg" alt="Different computers">
    </section>`
    break;
    case "use":
        content=`   <section>
        <h2>Common Uses of Computers</h2>
        <ul>
            <li><strong>Communication:</strong> Computers enable users to communicate seamlessly through emails, video calls, and social media platforms. The internet connects billions of users worldwide, facilitating instant communication and collaboration across geographical boundaries. Real-time messaging and video conferencing tools have transformed personal and professional interactions, making it easier to connect regardless of location. Furthermore, collaboration tools allow teams to work together efficiently, enhancing productivity and teamwork.</li>
            <li><strong>Entertainment:</strong> Computers serve as hubs for entertainment, allowing users to play video games, stream movies, and listen to music. The evolution of graphics and sound technology has transformed computers into powerful entertainment devices, appealing to various interests. Online gaming communities have emerged, enabling players to connect and compete with others globally. Streaming services have also revolutionized how content is consumed, providing instant access to a vast library of movies and shows.</li>
            <li><strong>Productivity and Work:</strong> In professional environments, computers are essential for tasks such as document creation, data analysis, and project management. Software applications like Microsoft Office and Google Workspace enhance productivity, enabling individuals and teams to work more efficiently. The rise of remote work has made collaboration software indispensable, allowing employees to maintain productivity from various locations. Moreover, automation tools streamline repetitive tasks, freeing up time for more strategic activities.</li>
            <li><strong>Education and Learning:</strong> Computers provide access to vast educational resources, including online courses, e-books, and research databases. E-learning platforms have made education more accessible, allowing students to learn at their own pace from anywhere in the world. Virtual classrooms and educational software facilitate interactive learning experiences, enhancing student engagement. Additionally, computers support research and innovation, empowering learners to explore and discover new information easily.</li>
            <li><strong>Data Analysis:</strong> Computers are indispensable for processing and analyzing large datasets, enabling businesses and researchers to derive insights and make informed decisions. Data analysis software helps visualize trends and patterns, facilitating strategic planning and forecasting. The growing importance of data-driven decision-making has increased the demand for data analysis tools across various industries. Furthermore, machine learning and artificial intelligence techniques are being integrated into data analysis, unlocking new possibilities for predictive analytics.</li>
        </ul>
    </section>`
    break;
                case 'intro':
                    content = ` <div class="main-div">
    <h4 class= "head">Introduction  About programming</h4>
    <div class="des">
        <section></section>
            <h6>What is Programming?</h6>
            <p>Programming is the process of creating a set of instructions that tell a computer how to perform a specific task. These instructions, known as <strong>code</strong>, are written in various programming languages, such as Python, Java, C, and JavaScript, which the computer can interpret and execute.</p>
            <p>Programming is fundamental to the operation of modern technology. It allows for the creation of software, websites, mobile apps, games, and more. From the simplest calculator app on your phone to complex systems like autopilot on airplanes, programming powers almost everything we use daily.</p>
        </section>
        <section class="code">
            <code>

            </code>



        </section>
        <section class="des">

        </section>
        <br><br>
        <section class="code">
            <code>

            </code>



        </section>
        <section class="des">

        </section>

    </div>
</div>`;

                    break;
                    case 'why':
                        content=`<div >
        <h1>Why Programming Matters</h1>

        <h2>1. Make Life Easier</h2>
        <p>Programming can make computers handle boring or difficult tasks for us, like solving math problems or organizing data.</p>

        <h2>2. Create Cool Stuff</h2>
        <p>We can use programming to make apps, websites, games, and robots that people use every day.</p>

        <h2>3. Solve Problems</h2>
        <p>It helps us find new ways to fix problems, like designing tools that help people work faster or learn better.</p>

        <h2>4. Talk to Computers</h2>
        <p>Computers don’t understand our language, so programming is how we tell them what to do.</p>

        <h2>5. Get Good Jobs</h2>
        <p>Knowing how to program opens up lots of job options, from building apps to working with data or designing games.</p>

        <p>In short, programming helps us make computers do things that make our lives better, more fun, and more efficient.</p>
    </div>`
    break;
                case 'structure':
                    content = `
                        <h1>Structure of a Program</h1>
                        <p>A well-structured program is easier to read and maintain. The key elements include:</p>
                        <ul>
                            <li><strong>Variables:</strong> Used to store data values.</li>
                            <li><strong>Functions:</strong> Blocks of code designed to perform a particular task.</li>
                            <li><strong>Control Flow:</strong> Determines the order in which instructions are executed.</li>
                        </ul>
                        <p>Here's an example:</p>
                        <pre><code>function greet() {
    console.log("Hello, World!");
}
greet(); // Calls the function</code></pre>
                    `;
                    break;
                    case  "comp":
                        content=`<header>
    <h1>Compilers and Interpreters</h1>
</header>

<article>
    <h2>What is a Compiler?</h2>
    <p>A compiler is a special program that translates a programming language's source code into machine code, bytecode, or another programming language. The main function of a compiler is to transform high-level code into low-level code so that the computer can execute it.</p>
    
    <h3>Characteristics of Compilers:</h3>
    <ul>
        <li>Processes the entire program at once.</li>
        <li>Produces an object code file, which can be executed independently.</li>
        <li>Generally, faster execution time since the translation is done beforehand.</li>
        <li>Debugging can be more difficult, as errors are shown after the compilation.</li>
    </ul>
    
    <h3 >Examples of Compilers:</h3>
    <ul>
        <li>GCC (GNU Compiler Collection)</li>
        <li>Clang</li>
        <li>Microsoft Visual C++</li>
    </ul>
</article>

<article>
    <h2>What is an Interpreter?</h2>
    <p>An interpreter is a program that directly executes instructions written in a programming or scripting language without requiring them to be compiled into machine code. It reads the source code line by line and executes it on the fly.</p>

    <h3>Characteristics of Interpreters:</h3>
    <ul>
        <li>Processes the program one line at a time.</li>
        <li>No object code file is generated; the source code is executed directly.</li>
        <li>Generally, slower execution time due to the on-the-fly translation.</li>
        <li>Debugging is easier, as errors are shown immediately when encountered.</li>
    </ul>
    
    <h3>Examples of Interpreters:</h3>
    <ul>
        <li>Python Interpreter</li>
        <li>Ruby Interpreter</li>
        <li>JavaScript Engine (like V8)</li>
    </ul>
</article>

<article>
    <h2>Compiler vs. Interpreter</h2>
    <table style="width:100%; border-collapse: collapse;">
        <tr>
            <th style="border: 1px solid #ddd; padding: 8px;">Aspect</th>
            <th style="border: 1px solid #ddd; padding: 8px;">Compiler</th>
            <th style="border: 1px solid #ddd; padding: 8px;">Interpreter</th>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 8px;">Translation Method</td>
            <td style="border: 1px solid #ddd; padding: 8px;">Whole program at once</td>
            <td style="border: 1px solid #ddd; padding: 8px;">Line by line</td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 8px;">Execution Speed</td>
            <td style="border: 1px solid #ddd; padding: 8px;">Faster</td>
            <td style="border: 1px solid #ddd; padding: 8px;">Slower</td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 8px;">Error Detection</td>
            <td style="border: 1px solid #ddd; padding: 8px;">After compilation</td>
            <td style="border: 1px solid #ddd; padding: 8px;">During execution</td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd; padding: 8px;">Memory Usage</td>
            <td style="border: 1px solid #ddd; padding: 8px;">Generally higher</td>
            <td style="border: 1px solid #ddd; padding: 8px;">Generally lower</td>
        </tr>
    </table>
</article>`
break;
case "ptypes":
    content=`<div >
        <h1>Types of Programming Languages</h1>

        <h2>1. High-Level Languages</h2>
        <p>High-level programming languages are closer to human language and are easier to read and write. They are abstracted from the machine’s hardware. Examples include Python, Java, C++, and JavaScript.</p>

        <h2>2. Low-Level Languages</h2>
        <p>Low-level programming languages are closer to the machine's hardware, giving more control over the system resources, but they are harder to write and understand. Examples include C and Assembly.</p>

        <h2>3. Assembly Language</h2>
        <p>Assembly language is a low-level programming language that is specific to a computer architecture. It uses mnemonic codes to represent machine-level instructions.</p>

        <h2>Comparison Table</h2>
        <table border='3'>
            <thead>
                <tr>
                    <th>Feature</th>
                    <th>High-Level Language</th>
                    <th>Low-Level Language</th>
                    <th>Assembly Language</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Abstraction</td>
                    <td>Highly abstracted from machine code, easy for humans to read</td>
                    <td>Less abstracted, closer to machine code</td>
                   